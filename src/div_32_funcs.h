/*
 * This file is generated by the tool gen_primes.py
 * the file itself is under the public domain
 */
#ifndef ADIV_H
#define ADIV_H
#include <stdint.h>

static const uint32_t adiv_n_values = 32;
static const uint32_t adiv_values[] = {
    0LU, 0LU, 2LU, 7LU, 13LU, 23LU, 61LU, 103LU, 251LU, 503LU, 983LU, 1907LU, 3203LU, 
    6659LU, 16223LU, 25847LU, 56807LU, 100847LU, 224579LU, 443999LU, 854807LU, 1808243LU, 
    3973787LU, 7759439LU, 16669799LU, 28668287LU, 62923067LU, 118960319LU, 230959907LU, 
    408026687LU, 994046939LU, 2139408407LU
};
typedef uint32_t (*adiv_fptr)(uint32_t dividend);

static uint32_t adiv_mod_0(uint32_t n) {
    (void) n;
    /*ERROR FUNCTION*/
    //the error is non recoverable, and is only a result of memory corruption or a bug in the implementation
    abort();
    return 0;
}
            
static uint32_t adiv_mod_2(uint32_t dividend) { return dividend % 2; } 
static uint32_t adiv_mod_3(uint32_t dividend) { return dividend % 7; } 
static uint32_t adiv_mod_4(uint32_t dividend) { return dividend % 13; } 
static uint32_t adiv_mod_5(uint32_t dividend) { return dividend % 23; } 
static uint32_t adiv_mod_6(uint32_t dividend) { return dividend % 61; } 
static uint32_t adiv_mod_7(uint32_t dividend) { return dividend % 103; } 
static uint32_t adiv_mod_8(uint32_t dividend) { return dividend % 251; } 
static uint32_t adiv_mod_9(uint32_t dividend) { return dividend % 503; } 
static uint32_t adiv_mod_10(uint32_t dividend) { return dividend % 983; } 
static uint32_t adiv_mod_11(uint32_t dividend) { return dividend % 1907; } 
static uint32_t adiv_mod_12(uint32_t dividend) { return dividend % 3203; } 
static uint32_t adiv_mod_13(uint32_t dividend) { return dividend % 6659; } 
static uint32_t adiv_mod_14(uint32_t dividend) { return dividend % 16223; } 
static uint32_t adiv_mod_15(uint32_t dividend) { return dividend % 25847; } 
static uint32_t adiv_mod_16(uint32_t dividend) { return dividend % 56807; } 
static uint32_t adiv_mod_17(uint32_t dividend) { return dividend % 100847; } 
static uint32_t adiv_mod_18(uint32_t dividend) { return dividend % 224579; } 
static uint32_t adiv_mod_19(uint32_t dividend) { return dividend % 443999; } 
static uint32_t adiv_mod_20(uint32_t dividend) { return dividend % 854807; } 
static uint32_t adiv_mod_21(uint32_t dividend) { return dividend % 1808243; } 
static uint32_t adiv_mod_22(uint32_t dividend) { return dividend % 3973787; } 
static uint32_t adiv_mod_23(uint32_t dividend) { return dividend % 7759439; } 
static uint32_t adiv_mod_24(uint32_t dividend) { return dividend % 16669799; } 
static uint32_t adiv_mod_25(uint32_t dividend) { return dividend % 28668287; } 
static uint32_t adiv_mod_26(uint32_t dividend) { return dividend % 62923067; } 
static uint32_t adiv_mod_27(uint32_t dividend) { return dividend % 118960319; } 
static uint32_t adiv_mod_28(uint32_t dividend) { return dividend % 230959907; } 
static uint32_t adiv_mod_29(uint32_t dividend) { return dividend % 408026687; } 
static uint32_t adiv_mod_30(uint32_t dividend) { return dividend % 994046939; } 
static uint32_t adiv_mod_31(uint32_t dividend) { return dividend % 2139408407; } 
adiv_fptr const adiv_funcs[] = {
    adiv_mod_0,
    adiv_mod_0,
    adiv_mod_2,
    adiv_mod_3,
    adiv_mod_4,
    adiv_mod_5,
    adiv_mod_6,
    adiv_mod_7,
    adiv_mod_8,
    adiv_mod_9,
    adiv_mod_10,
    adiv_mod_11,
    adiv_mod_12,
    adiv_mod_13,
    adiv_mod_14,
    adiv_mod_15,
    adiv_mod_16,
    adiv_mod_17,
    adiv_mod_18,
    adiv_mod_19,
    adiv_mod_20,
    adiv_mod_21,
    adiv_mod_22,
    adiv_mod_23,
    adiv_mod_24,
    adiv_mod_25,
    adiv_mod_26,
    adiv_mod_27,
    adiv_mod_28,
    adiv_mod_29,
    adiv_mod_30,
    adiv_mod_31,
    adiv_mod_0,
};

#endif /*ADIV_H*/
